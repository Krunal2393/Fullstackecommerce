openapi: 3.0.0
info:
  title: E-Commerce API
  version: 1.0.0
  description: Complete API documentation for E-Commerce backend
servers:
  - url: http://localhost:5000

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        name:
          type: string
        role:
          type: string
        isVerified:
          type: boolean

    Product:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        price:
          type: number
        stockQuantity:
          type: integer
        categoryId:
          type: integer
        imageUrl:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        category:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string

    ProductInput:
      type: object
      required:
        - name
        - price
        - categoryId
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: string
        stockQuantity:
          type: integer
        categoryId:
          type: integer

    Category:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        slug:
          type: string

    CartItem:
      type: object
      properties:
        productId:
          type: integer
        quantity:
          type: integer

    Order:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        totalAmount:
          type: number
        status:
          type: string
        shippingAddress:
          type: object
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'

  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: connect.sid

paths:
  # ---------------- USER ----------------
  /api/auth/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                password:
                  type: string
                name:
                  type: string
      responses:
        '200':
          description: User registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /api/auth/login:
    post:
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: User logged in

  /api/auth/logout:
    post:
      summary: Logout user
      responses:
        '200':
          description: User logged out

  /api/auth/forgot-password:
    post:
      summary: Forgot password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        '200':
          description: Reset instructions sent

  /api/auth/reset-password:
    post:
      summary: Reset password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                token:
                  type: string
                newPassword:
                  type: string
      responses:
        '200':
          description: Password reset

  /api/auth/verify-email:
    post:
      summary: Verify email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                token:
                  type: string
      responses:
        '200':
          description: Email verified

  /api/auth/profile:
    get:
      summary: Get logged-in user profile
      security:
        - cookieAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    put:
      summary: Update user profile
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
      responses:
        '200':
          description: Profile updated

  # ---------------- CATEGORIES ----------------
  /api/categories:
    get:
      summary: Get all categories
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
    post:
      summary: Create category
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        '200':
          description: Category created

  /api/categories/{id}:
    put:
      summary: Update category
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        '200':
          description: Category updated
    delete:
      summary: Delete category
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Category deleted

  # ---------------- PRODUCTS ----------------
  /api/products:
    get:
      summary: Get all products
      responses:
        '200':
          description: List of products
    post:
      summary: Create product
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
      responses:
        '200':
          description: Product created

  /api/products/{id}:
    get:
      summary: Get product by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Product details
    put:
      summary: Update product
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
      responses:
        '200':
          description: Product updated
    delete:
      summary: Delete product
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Product deleted

  /api/products/{id}/upload-image:
    post:
      summary: Upload product image
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: Image uploaded

  # ---------------- CART ----------------
  /api/cart:
    get:
      summary: Get cart
      responses:
        '200':
          description: Cart items
          content:
            application/json:
              schema:
                type: object
                properties:
                  sessionId:
                    type: string
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/CartItem'

  /api/cart/add:
    post:
      summary: Add item to cart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItem'
      responses:
        '200':
          description: Item added

  /api/cart/update:
    put:
      summary: Update cart item
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItem'
      responses:
        '200':
          description: Cart updated

  /api/cart/{itemId}:
    delete:
      summary: Delete item from cart
      parameters:
        - in: path
          name: itemId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Item deleted

  /api/cart/clear:
    delete:
      summary: Clear cart
      responses:
        '200':
          description: Cart cleared

  # ---------------- ORDERS ----------------
  /api/orders/create:
    post:
      summary: Create order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sessionId:
                  type: string
                shippingAddress:
                  type: object
                userId:
                  type: integer
      responses:
        '200':
          description: Order created


